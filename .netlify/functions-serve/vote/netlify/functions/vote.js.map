{
  "version": 3,
  "sources": ["../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/models/Memory.js", "../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/vote.js"],
  "sourceRoot": "C:/Users/isman/AppData/Local/Temp/tmp-23272-xjRjaxaov671",
  "sourcesContent": ["const mongoose = require('mongoose');\n\nconst memorySchema = new mongoose.Schema({\n  type: {\n    type: String,\n    required: true,\n    enum: ['url', 'text', 'image', 'video', 'audio', 'document']\n  },\n  url: {\n    type: String,\n    required: function() {\n      return this.type === 'url' || this.type === 'image' || this.type === 'video' || this.type === 'audio' || this.type === 'document';\n    }\n  },\n  content: {\n    type: String,\n    required: function() {\n      return this.type === 'text';\n    }\n  },\n  tags: {\n    type: [String],\n    default: []\n  },\n  status: {\n    type: String,\n    required: true,\n    enum: ['pending', 'approved', 'rejected'],\n    default: 'pending'\n  },\n  submittedAt: {\n    type: Date,\n    required: true,\n    default: Date.now\n  },\n  metadata: {\n    title: String,\n    description: String,\n    thumbnailUrl: String,\n    mediaType: String,\n    platform: String,\n    contentUrl: String,\n    fileType: String,\n    domain: String,\n    isSecure: Boolean,\n    createdAt: {\n      type: Date,\n      default: Date.now\n    },\n    updatedAt: {\n      type: Date,\n      default: Date.now\n    },\n    favicon: String,\n    ogTitle: String,\n    ogDescription: String,\n    ogImage: String,\n    ogType: String,\n    twitterTitle: String,\n    twitterDescription: String,\n    twitterImage: String,\n    twitterCard: String\n  },\n  votes: {\n    up: {\n      type: Number,\n      default: 0\n    },\n    down: {\n      type: Number,\n      default: 0\n    }\n  },\n  userVotes: {\n    type: Map,\n    of: String,\n    default: new Map()\n  }\n}, {\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      // Format dates as ISO strings\n      if (ret.metadata) {\n        ret.metadata.createdAt = ret.metadata.createdAt ? new Date(ret.metadata.createdAt).toISOString() : null;\n        ret.metadata.updatedAt = ret.metadata.updatedAt ? new Date(ret.metadata.updatedAt).toISOString() : null;\n      }\n      // Transform _id to id\n      ret.id = ret._id.toString();\n      delete ret._id;\n      // Remove MongoDB-specific fields\n      delete ret.__v;\n      // Convert userVotes Map to object for JSON\n      if (ret.userVotes instanceof Map) {\n        ret.userVotes = Object.fromEntries(ret.userVotes);\n      }\n      return ret;\n    }\n  },\n  toObject: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      ret.id = ret._id.toString();\n      if (!(ret.userVotes instanceof Map)) {\n        ret.userVotes = new Map(Object.entries(ret.userVotes || {}));\n      }\n      return ret;\n    }\n  }\n});\n\n// Update metadata timestamps before saving\nmemorySchema.pre('save', function(next) {\n  if (this.isModified()) {\n    const now = new Date();\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    if (this.isNew) {\n      this.metadata.createdAt = now;\n    }\n    this.metadata.updatedAt = now;\n  }\n  next();\n});\n\nconst Memory = mongoose.model('Memory', memorySchema);\n\nmodule.exports = Memory;\n", "require('dotenv').config();\nconst mongoose = require('mongoose');\nconst Memory = require('./models/Memory');\n\nlet conn = null;\n\nconst connectDb = async () => {\n  if (conn == null) {\n    if (!process.env.MONGODB_URI) {\n      throw new Error('MONGODB_URI environment variable is not set');\n    }\n    conn = await mongoose.connect(process.env.MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000\n    });\n  }\n  return conn;\n};\n\nexports.handler = async (event, context) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  const headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Accept',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS'\n  };\n\n  // Handle OPTIONS request for CORS\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers,\n      body: ''\n    };\n  }\n\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers: { ...headers, 'Allow': 'POST' },\n      body: JSON.stringify({ message: 'Method Not Allowed' })\n    };\n  }\n\n  try {\n    const { memoryId, voteType, userId } = JSON.parse(event.body);\n\n    // Validate input\n    if (!memoryId || !userId) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ message: 'Memory ID and User ID are required' })\n      };\n    }\n\n    if (!['up', 'down'].includes(voteType)) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ message: 'Vote type must be either \"up\" or \"down\"' })\n      };\n    }\n\n    await connectDb();\n\n    // Find the memory first\n    const memory = await Memory.findById(memoryId);\n    if (!memory) {\n      return {\n        statusCode: 404,\n        headers,\n        body: JSON.stringify({ message: 'Memory not found' })\n      };\n    }\n\n    // Get current user's vote\n    const currentVote = memory.userVotes.get(userId);\n    let updateQuery = {};\n\n    if (!currentVote) {\n      // New vote\n      updateQuery = {\n        $inc: { [`votes.${voteType}`]: 1 },\n        $set: { [`userVotes.${userId}`]: voteType }\n      };\n    } else if (currentVote === voteType) {\n      // Undo vote\n      updateQuery = {\n        $inc: { [`votes.${voteType}`]: -1 },\n        $unset: { [`userVotes.${userId}`]: \"\" }\n      };\n    } else {\n      // Change vote (e.g., from up to down)\n      updateQuery = {\n        $inc: {\n          [`votes.${currentVote}`]: -1,\n          [`votes.${voteType}`]: 1\n        },\n        $set: { [`userVotes.${userId}`]: voteType }\n      };\n    }\n\n    // Update the memory with the new vote\n    const updatedMemory = await Memory.findByIdAndUpdate(\n      memoryId,\n      updateQuery,\n      { \n        new: true,\n        runValidators: true\n      }\n    );\n\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        message: 'Vote recorded successfully',\n        votes: updatedMemory.votes,\n        userVote: updatedMemory.userVotes.get(userId) || null\n      })\n    };\n\n  } catch (error) {\n    console.error('Error in vote function:', error);\n    \n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        message: 'Internal server error while recording vote',\n        error: process.env.NODE_ENV === 'development' ? error.message : undefined\n      })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "mongoose", "Memory"]
}
