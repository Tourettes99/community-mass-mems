{
  "version": 3,
  "sources": ["../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/memories.js"],
  "sourceRoot": "C:/Users/isman/AppData/Local/Temp/tmp-23272-II9Khb3BQMb8",
  "sourcesContent": ["const mongoose = require('mongoose');\n\n// MongoDB Connection URI\nconst MONGODB_URI = process.env.MONGODB_URI;\nif (!MONGODB_URI) {\n  console.error('MONGODB_URI environment variable is missing');\n  throw new Error('MONGODB_URI environment variable is required');\n}\n\n// Memory Schema\nconst memorySchema = new mongoose.Schema({\n  type: {\n    type: String,\n    enum: ['image', 'gif', 'audio', 'url'],\n    required: true\n  },\n  url: {\n    type: String,\n    required: true\n  },\n  metadata: {\n    fileName: String,\n    resolution: String,\n    format: String,\n    fps: Number,\n    duration: String,\n    siteName: String,\n    description: String\n  },\n  createdAt: {\n    type: Date,\n    default: Date.now\n  }\n});\n\n// Ensure we don't try to recreate the model if it exists\nlet Memory;\ntry {\n  Memory = mongoose.models.Memory || mongoose.model('Memory', memorySchema);\n} catch (e) {\n  Memory = mongoose.model('Memory', memorySchema);\n}\n\n// Track connection status\nlet isConnected = false;\n\nconst connectToDatabase = async () => {\n  if (isConnected && mongoose.connection.readyState === 1) {\n    console.log('Using existing database connection');\n    return;\n  }\n\n  try {\n    // Log connection attempt\n    console.log('Attempting to connect to MongoDB...');\n    console.log('Connection string format:', MONGODB_URI.split('@')[1]); // Log URI without credentials\n\n    const conn = await mongoose.connect(MONGODB_URI);\n    \n    isConnected = true;\n    console.log('MongoDB Connected:', conn.connection.host);\n    \n    // Add connection event listeners\n    mongoose.connection.on('error', (err) => {\n      console.error('MongoDB connection error:', err);\n      isConnected = false;\n    });\n\n    mongoose.connection.on('disconnected', () => {\n      console.log('MongoDB disconnected');\n      isConnected = false;\n    });\n\n  } catch (error) {\n    console.error('MongoDB connection error:', error.message);\n    isConnected = false;\n    throw error;\n  }\n};\n\nexports.handler = async (event, context) => {\n  // Prevent function timeout from waiting for database\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n    'Content-Type': 'application/json'\n  };\n\n  // Handle preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 200,\n      headers\n    };\n  }\n\n  try {\n    // Connect to database\n    await connectToDatabase();\n\n    if (event.httpMethod === 'GET') {\n      // Log query attempt\n      console.log('Attempting to fetch memories...');\n\n      const memories = await Memory.find({})\n        .sort({ createdAt: -1 })\n        .lean() // Convert to plain JavaScript objects\n        .exec();\n\n      console.log(`Successfully retrieved ${memories.length} memories`);\n\n      return {\n        statusCode: 200,\n        headers,\n        body: JSON.stringify(memories)\n      };\n    }\n\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ message: 'Method not allowed' })\n    };\n\n  } catch (error) {\n    console.error('Function error:', error);\n    console.error('Stack trace:', error.stack);\n\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({\n        message: 'Internal server error',\n        error: error.message,\n        type: error.name,\n        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined\n      })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": []
}
