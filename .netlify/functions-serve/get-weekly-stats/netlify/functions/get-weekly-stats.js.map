{
  "version": 3,
  "sources": ["../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/utils/db.js", "../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/models/Memory.js", "../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/get-weekly-stats.js"],
  "sourceRoot": "C:/Users/isman/AppData/Local/Temp/tmp-23272-IxL95SJ4hy0x",
  "sourcesContent": ["const mongoose = require('mongoose');\n\nlet cachedDb = null;\n\nasync function connectToDatabase() {\n    if (cachedDb) {\n        return cachedDb;\n    }\n\n    try {\n        const connection = await mongoose.connect(process.env.MONGODB_URI, {\n            useNewUrlParser: true,\n            useUnifiedTopology: true,\n        });\n\n        cachedDb = connection;\n        return cachedDb;\n    } catch (error) {\n        console.error('MongoDB connection error:', error);\n        throw error;\n    }\n}\n\nmodule.exports = { connectToDatabase };\n", "const mongoose = require('mongoose');\n\nconst memorySchema = new mongoose.Schema({\n  type: {\n    type: String,\n    required: true,\n    enum: ['url', 'text', 'image', 'video', 'audio', 'document']\n  },\n  url: {\n    type: String,\n    required: function() {\n      return this.type === 'url' || this.type === 'image' || this.type === 'video' || this.type === 'audio' || this.type === 'document';\n    }\n  },\n  content: {\n    type: String,\n    required: function() {\n      return this.type === 'text';\n    }\n  },\n  tags: {\n    type: [String],\n    default: []\n  },\n  status: {\n    type: String,\n    required: true,\n    enum: ['pending', 'approved', 'rejected'],\n    default: 'pending'\n  },\n  submittedAt: {\n    type: Date,\n    required: true,\n    default: Date.now\n  },\n  metadata: {\n    title: String,\n    description: String,\n    thumbnailUrl: String,\n    mediaType: String,\n    platform: String,\n    contentUrl: String,\n    fileType: String,\n    domain: String,\n    isSecure: Boolean,\n    createdAt: {\n      type: Date,\n      default: Date.now\n    },\n    updatedAt: {\n      type: Date,\n      default: Date.now\n    },\n    favicon: String,\n    ogTitle: String,\n    ogDescription: String,\n    ogImage: String,\n    ogType: String,\n    twitterTitle: String,\n    twitterDescription: String,\n    twitterImage: String,\n    twitterCard: String\n  },\n  votes: {\n    up: {\n      type: Number,\n      default: 0\n    },\n    down: {\n      type: Number,\n      default: 0\n    }\n  },\n  userVotes: {\n    type: Map,\n    of: String,\n    default: new Map()\n  }\n}, {\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      // Format dates as ISO strings\n      if (ret.metadata) {\n        ret.metadata.createdAt = ret.metadata.createdAt ? new Date(ret.metadata.createdAt).toISOString() : null;\n        ret.metadata.updatedAt = ret.metadata.updatedAt ? new Date(ret.metadata.updatedAt).toISOString() : null;\n      }\n      // Transform _id to id\n      ret.id = ret._id.toString();\n      delete ret._id;\n      // Remove MongoDB-specific fields\n      delete ret.__v;\n      // Convert userVotes Map to object for JSON\n      if (ret.userVotes instanceof Map) {\n        ret.userVotes = Object.fromEntries(ret.userVotes);\n      }\n      return ret;\n    }\n  },\n  toObject: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      ret.id = ret._id.toString();\n      if (!(ret.userVotes instanceof Map)) {\n        ret.userVotes = new Map(Object.entries(ret.userVotes || {}));\n      }\n      return ret;\n    }\n  }\n});\n\n// Update metadata timestamps before saving\nmemorySchema.pre('save', function(next) {\n  if (this.isModified()) {\n    const now = new Date();\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    if (this.isNew) {\n      this.metadata.createdAt = now;\n    }\n    this.metadata.updatedAt = now;\n  }\n  next();\n});\n\nconst Memory = mongoose.model('Memory', memorySchema);\n\nmodule.exports = Memory;\n", "const { connectToDatabase } = require('./utils/db');\nconst Memory = require('./models/Memory');\n\nexports.handler = async (event, context) => {\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Content-Type': 'application/json'\n  };\n\n  try {\n    await connectToDatabase();\n\n    // Get current date and start of week (Sunday)\n    const now = new Date();\n    const startOfWeek = new Date(now);\n    startOfWeek.setHours(0, 0, 0, 0);\n    startOfWeek.setDate(now.getDate() - now.getDay()); // Set to Sunday\n\n    // Get next Sunday\n    const nextReset = new Date(startOfWeek);\n    nextReset.setDate(nextReset.getDate() + 7);\n\n    // Count posts this week\n    const postsThisWeek = await Memory.countDocuments({\n      submittedAt: { $gte: startOfWeek.toISOString() },\n      status: 'approved'  // Only count approved posts\n    });\n\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        postsThisWeek,\n        weeklyLimit: 35,\n        nextReset: nextReset.toISOString()\n      })\n    };\n  } catch (error) {\n    console.error('Error getting weekly stats:', error);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ error: 'Failed to get weekly stats' })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "connectToDatabase", "exports", "module", "Memory"]
}
