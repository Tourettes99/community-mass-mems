{
  "version": 3,
  "sources": ["../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/models/Memory.js", "../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/moderate-memory.js"],
  "sourceRoot": "C:/Users/isman/AppData/Local/Temp/tmp-23272-XIpyIely3UCp",
  "sourcesContent": ["const mongoose = require('mongoose');\n\nconst memorySchema = new mongoose.Schema({\n  type: {\n    type: String,\n    required: true,\n    enum: ['url', 'text', 'image', 'video', 'audio', 'document']\n  },\n  url: {\n    type: String,\n    required: function() {\n      return this.type === 'url' || this.type === 'image' || this.type === 'video' || this.type === 'audio' || this.type === 'document';\n    }\n  },\n  content: {\n    type: String,\n    required: function() {\n      return this.type === 'text';\n    }\n  },\n  tags: {\n    type: [String],\n    default: []\n  },\n  status: {\n    type: String,\n    required: true,\n    enum: ['pending', 'approved', 'rejected'],\n    default: 'pending'\n  },\n  submittedAt: {\n    type: Date,\n    required: true,\n    default: Date.now\n  },\n  metadata: {\n    title: String,\n    description: String,\n    thumbnailUrl: String,\n    mediaType: String,\n    platform: String,\n    contentUrl: String,\n    fileType: String,\n    domain: String,\n    isSecure: Boolean,\n    createdAt: {\n      type: Date,\n      default: Date.now\n    },\n    updatedAt: {\n      type: Date,\n      default: Date.now\n    },\n    favicon: String,\n    ogTitle: String,\n    ogDescription: String,\n    ogImage: String,\n    ogType: String,\n    twitterTitle: String,\n    twitterDescription: String,\n    twitterImage: String,\n    twitterCard: String\n  },\n  votes: {\n    up: {\n      type: Number,\n      default: 0\n    },\n    down: {\n      type: Number,\n      default: 0\n    }\n  },\n  userVotes: {\n    type: Map,\n    of: String,\n    default: new Map()\n  }\n}, {\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      // Format dates as ISO strings\n      if (ret.metadata) {\n        ret.metadata.createdAt = ret.metadata.createdAt ? new Date(ret.metadata.createdAt).toISOString() : null;\n        ret.metadata.updatedAt = ret.metadata.updatedAt ? new Date(ret.metadata.updatedAt).toISOString() : null;\n      }\n      // Transform _id to id\n      ret.id = ret._id.toString();\n      delete ret._id;\n      // Remove MongoDB-specific fields\n      delete ret.__v;\n      // Convert userVotes Map to object for JSON\n      if (ret.userVotes instanceof Map) {\n        ret.userVotes = Object.fromEntries(ret.userVotes);\n      }\n      return ret;\n    }\n  },\n  toObject: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      ret.id = ret._id.toString();\n      if (!(ret.userVotes instanceof Map)) {\n        ret.userVotes = new Map(Object.entries(ret.userVotes || {}));\n      }\n      return ret;\n    }\n  }\n});\n\n// Update metadata timestamps before saving\nmemorySchema.pre('save', function(next) {\n  if (this.isModified()) {\n    const now = new Date();\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    if (this.isNew) {\n      this.metadata.createdAt = now;\n    }\n    this.metadata.updatedAt = now;\n  }\n  next();\n});\n\nconst Memory = mongoose.model('Memory', memorySchema);\n\nmodule.exports = Memory;\n", "require('dotenv').config();\nconst mongoose = require('mongoose');\nconst Memory = require('./models/Memory');\n\nlet conn = null;\n\nconst connectDb = async () => {\n  if (conn == null) {\n    conn = await mongoose.connect(process.env.MONGODB_URI, {\n      serverSelectionTimeoutMS: 5000\n    });\n  }\n  return conn;\n};\n\nexports.handler = async (event, context) => {\n  context.callbackWaitsForEmptyEventLoop = false;\n\n  const headers = {\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type',\n    'Content-Type': 'application/json'\n  };\n\n  // Handle preflight requests\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers\n    };\n  }\n\n  if (event.httpMethod !== 'POST') {\n    return {\n      statusCode: 405,\n      headers,\n      body: JSON.stringify({ error: 'Method not allowed' })\n    };\n  }\n\n  try {\n    let memoryId, action, token;\n\n    // Check if the request is form-urlencoded or JSON\n    const contentType = event.headers['content-type'] || '';\n    \n    if (contentType.includes('application/x-www-form-urlencoded')) {\n      // Parse form data\n      const params = new URLSearchParams(event.body);\n      memoryId = params.get('memoryId');\n      action = params.get('action');\n      token = params.get('token');\n    } else {\n      // Parse JSON data\n      const body = JSON.parse(event.body);\n      memoryId = body.memoryId;\n      action = body.action;\n      token = body.token;\n    }\n\n    // Validate required parameters\n    if (!memoryId || !action || !token) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ \n          error: 'Missing required parameters',\n          received: { memoryId, action, token }\n        })\n      };\n    }\n\n    // Validate action\n    if (!['approve', 'reject'].includes(action)) {\n      return {\n        statusCode: 400,\n        headers,\n        body: JSON.stringify({ error: 'Invalid action' })\n      };\n    }\n\n    // Simple token validation\n    const expectedToken = Buffer.from(`${memoryId}:${process.env.EMAIL_USER}`).toString('base64');\n    if (token !== expectedToken) {\n      return {\n        statusCode: 401,\n        headers,\n        body: JSON.stringify({ error: 'Invalid token' })\n      };\n    }\n\n    await connectDb();\n\n    // Find and update the memory\n    const memory = await Memory.findById(memoryId);\n    if (!memory) {\n      return {\n        statusCode: 404,\n        headers,\n        body: JSON.stringify({ error: 'Memory not found' })\n      };\n    }\n\n    // Update status based on action\n    memory.status = action === 'approve' ? 'approved' : 'rejected';\n    await memory.save();\n\n    // Send HTML response for form submissions\n    if (contentType.includes('application/x-www-form-urlencoded')) {\n      return {\n        statusCode: 200,\n        headers: {\n          'Content-Type': 'text/html',\n          'Access-Control-Allow-Origin': '*'\n        },\n        body: `\n          <!DOCTYPE html>\n          <html>\n          <head>\n              <title>Moderation Result</title>\n              <style>\n                  body {\n                      font-family: Arial, sans-serif;\n                      display: flex;\n                      justify-content: center;\n                      align-items: center;\n                      height: 100vh;\n                      margin: 0;\n                      background-color: #f0f2f5;\n                  }\n                  .container {\n                      text-align: center;\n                      padding: 20px;\n                      background-color: white;\n                      border-radius: 8px;\n                      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n                      max-width: 500px;\n                      width: 90%;\n                  }\n                  .message {\n                      margin: 20px 0;\n                      font-size: 18px;\n                      color: ${action === 'approve' ? '#4CAF50' : '#f44336'};\n                  }\n              </style>\n          </head>\n          <body>\n              <div class=\"container\">\n                  <div class=\"message\">\n                      Memory successfully ${action}ed!\n                  </div>\n              </div>\n          </body>\n          </html>\n        `\n      };\n    }\n\n    // Send JSON response for API calls\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify({\n        message: `Memory ${action}ed successfully`,\n        status: memory.status\n      })\n    };\n\n  } catch (error) {\n    console.error('Error in moderation:', error);\n    return {\n      statusCode: 500,\n      headers,\n      body: JSON.stringify({ error: 'Internal server error', details: error.message })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "mongoose", "Memory"]
}
