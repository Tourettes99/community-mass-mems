{
  "version": 3,
  "sources": ["../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/models/Memory.js", "../../../../Documents/community-mass-mems/community-mass-mems/netlify/functions/getMemories.js"],
  "sourceRoot": "C:/Users/isman/AppData/Local/Temp/tmp-23272-AJSD5eWVNIwO",
  "sourcesContent": ["const mongoose = require('mongoose');\n\nconst memorySchema = new mongoose.Schema({\n  type: {\n    type: String,\n    required: true,\n    enum: ['url', 'text', 'image', 'video', 'audio', 'document']\n  },\n  url: {\n    type: String,\n    required: function() {\n      return this.type === 'url' || this.type === 'image' || this.type === 'video' || this.type === 'audio' || this.type === 'document';\n    }\n  },\n  content: {\n    type: String,\n    required: function() {\n      return this.type === 'text';\n    }\n  },\n  tags: {\n    type: [String],\n    default: []\n  },\n  status: {\n    type: String,\n    required: true,\n    enum: ['pending', 'approved', 'rejected'],\n    default: 'pending'\n  },\n  submittedAt: {\n    type: Date,\n    required: true,\n    default: Date.now\n  },\n  metadata: {\n    title: String,\n    description: String,\n    thumbnailUrl: String,\n    mediaType: String,\n    platform: String,\n    contentUrl: String,\n    fileType: String,\n    domain: String,\n    isSecure: Boolean,\n    createdAt: {\n      type: Date,\n      default: Date.now\n    },\n    updatedAt: {\n      type: Date,\n      default: Date.now\n    },\n    favicon: String,\n    ogTitle: String,\n    ogDescription: String,\n    ogImage: String,\n    ogType: String,\n    twitterTitle: String,\n    twitterDescription: String,\n    twitterImage: String,\n    twitterCard: String\n  },\n  votes: {\n    up: {\n      type: Number,\n      default: 0\n    },\n    down: {\n      type: Number,\n      default: 0\n    }\n  },\n  userVotes: {\n    type: Map,\n    of: String,\n    default: new Map()\n  }\n}, {\n  timestamps: true,\n  toJSON: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      // Format dates as ISO strings\n      if (ret.metadata) {\n        ret.metadata.createdAt = ret.metadata.createdAt ? new Date(ret.metadata.createdAt).toISOString() : null;\n        ret.metadata.updatedAt = ret.metadata.updatedAt ? new Date(ret.metadata.updatedAt).toISOString() : null;\n      }\n      // Transform _id to id\n      ret.id = ret._id.toString();\n      delete ret._id;\n      // Remove MongoDB-specific fields\n      delete ret.__v;\n      // Convert userVotes Map to object for JSON\n      if (ret.userVotes instanceof Map) {\n        ret.userVotes = Object.fromEntries(ret.userVotes);\n      }\n      return ret;\n    }\n  },\n  toObject: {\n    virtuals: true,\n    transform: function(doc, ret) {\n      ret.id = ret._id.toString();\n      if (!(ret.userVotes instanceof Map)) {\n        ret.userVotes = new Map(Object.entries(ret.userVotes || {}));\n      }\n      return ret;\n    }\n  }\n});\n\n// Update metadata timestamps before saving\nmemorySchema.pre('save', function(next) {\n  if (this.isModified()) {\n    const now = new Date();\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    if (this.isNew) {\n      this.metadata.createdAt = now;\n    }\n    this.metadata.updatedAt = now;\n  }\n  next();\n});\n\nconst Memory = mongoose.model('Memory', memorySchema);\n\nmodule.exports = Memory;\n", "require('dotenv').config();\nconst mongoose = require('mongoose');\nconst Memory = require('./models/Memory');\n\nlet conn = null;\n\nconst connectDb = async () => {\n  if (conn == null) {\n    const MONGODB_URI = process.env.MONGODB_URI;\n    if (!MONGODB_URI) {\n      throw new Error('MONGODB_URI environment variable is not set');\n    }\n    \n    try {\n      conn = await mongoose.connect(MONGODB_URI, {\n        serverSelectionTimeoutMS: 5000,\n        socketTimeoutMS: 45000,\n        connectTimeoutMS: 10000,\n        useNewUrlParser: true,\n        useUnifiedTopology: true\n      });\n      console.log('Successfully connected to MongoDB memories database');\n    } catch (err) {\n      console.error('MongoDB connection error:', err);\n      throw err;\n    }\n  }\n  return conn;\n};\n\nconst formatDate = (date) => {\n  if (!date) return null;\n  try {\n    return date instanceof Date ? date.toISOString() : new Date(date).toISOString();\n  } catch (error) {\n    console.error('Error formatting date:', error);\n    return null;\n  }\n};\n\nconst formatMemory = (memory) => {\n  if (!memory) return null;\n  try {\n    const formatted = {\n      ...memory,\n      submittedAt: formatDate(memory.submittedAt),\n      metadata: {\n        ...memory.metadata,\n        createdAt: formatDate(memory.submittedAt),\n        updatedAt: formatDate(memory.updatedAt)\n      },\n      votes: {\n        up: memory.votes?.up || 0,\n        down: memory.votes?.down || 0\n      }\n    };\n    delete formatted.__v;\n    return formatted;\n  } catch (error) {\n    console.error('Error formatting memory:', error);\n    return null;\n  }\n};\n\nexports.handler = async (event, context) => {\n  // Prevent function from waiting for connections to close\n  context.callbackWaitsForEmptyEventLoop = false;\n  \n  // Set default headers\n  const headers = {\n    'Content-Type': 'application/json',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Headers': 'Content-Type, Accept',\n    'Access-Control-Allow-Methods': 'GET, OPTIONS'\n  };\n\n  // Handle OPTIONS request for CORS\n  if (event.httpMethod === 'OPTIONS') {\n    return {\n      statusCode: 204,\n      headers,\n      body: ''\n    };\n  }\n\n  // Validate HTTP method\n  if (event.httpMethod !== 'GET') {\n    return {\n      statusCode: 405,\n      headers: { ...headers, 'Allow': 'GET' },\n      body: JSON.stringify({ message: 'Method Not Allowed' })\n    };\n  }\n  \n  try {\n    // Connect to database\n    await connectDb();\n    console.log('Connected to database, fetching memories...');\n\n    // Fetch memories with proper error handling\n    let memories;\n    try {\n      // Only fetch approved memories\n      memories = await Memory.find({ status: 'approved' })\n        .sort({ submittedAt: -1 })\n        .lean()\n        .exec();\n      \n      // Format memories to ensure proper date handling\n      memories = memories.map(formatMemory).filter(Boolean);\n      \n      console.log(`Successfully fetched ${memories.length} approved memories`);\n    } catch (dbError) {\n      console.error('Database query error:', dbError);\n      throw new Error(`Database query failed: ${dbError.message}`);\n    }\n\n    // Validate memories array\n    if (!Array.isArray(memories)) {\n      console.error('Invalid memories format:', memories);\n      throw new Error('Invalid data format returned from database');\n    }\n\n    return {\n      statusCode: 200,\n      headers,\n      body: JSON.stringify(memories)\n    };\n  } catch (error) {\n    console.error('Error in getMemories function:', error);\n    \n    // Determine if it's a connection error\n    const isConnectionError = error.name === 'MongooseError' || \n                            error.name === 'MongoError' ||\n                            error.message.includes('connect');\n    \n    const statusCode = isConnectionError ? 503 : 500;\n    const message = isConnectionError \n      ? 'Database connection error. Please try again later.'\n      : 'Internal server error while fetching memories.';\n\n    return {\n      statusCode,\n      headers,\n      body: JSON.stringify({\n        message,\n        error: process.env.NODE_ENV === 'development' ? error.message : undefined\n      })\n    };\n  }\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "mongoose", "Memory"]
}
