{"ast":null,"code":"import React,{useState,useRef}from'react';import{Box,Button,TextField,CircularProgress,Snackbar,Alert,Stack,Chip,IconButton,Tooltip,FormControl,InputLabel,Select,MenuItem}from'@mui/material';import AddIcon from'@mui/icons-material/Add';import ClearIcon from'@mui/icons-material/Clear';import LinkIcon from'@mui/icons-material/Link';import TextFieldsIcon from'@mui/icons-material/TextFields';import ImageIcon from'@mui/icons-material/Image';import VideoFileIcon from'@mui/icons-material/VideoFile';import AudioFileIcon from'@mui/icons-material/AudioFile';import InsertDriveFileIcon from'@mui/icons-material/InsertDriveFile';import{styled}from'@mui/material/styles';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SUPPORTED_FILE_TYPES={image:['.jpg','.jpeg','.png','.gif','.bmp','.svg','.webp'],video:['.mp4','.mkv','.avi','.mov','.webm','.flv','.wmv','.m4v'],audio:['.mp3','.wav','.aac','.ogg','.m4a','.flac','.wma'],static:['.txt','.html','.json','.xml','.md','.csv']};const isFileType=type=>{return type in SUPPORTED_FILE_TYPES;};const Input=styled('input')({display:'none'});const UploadBar=_ref=>{let{onMemoryCreated}=_ref;const[type,setType]=useState('url');const[url,setUrl]=useState('');const[content,setContent]=useState('');const[tags,setTags]=useState([]);const[currentTag,setCurrentTag]=useState('');const[loading,setLoading]=useState(false);const[error,setError]=useState(null);const[success,setSuccess]=useState(false);const fileInputRef=useRef(null);const handleTypeChange=event=>{const newType=event.target.value;setType(newType);setUrl('');setContent('');};const handleTagAdd=()=>{if(currentTag&&!tags.includes(currentTag)){setTags([...tags,currentTag]);setCurrentTag('');}};const handleTagDelete=tagToDelete=>{setTags(tags.filter(tag=>tag!==tagToDelete));};const handleKeyPress=event=>{if(event.key==='Enter'&&currentTag){event.preventDefault();handleTagAdd();}};const handleUrlChange=event=>{setUrl(event.target.value);};const handleContentChange=event=>{setContent(event.target.value);};const handleTagChange=event=>{setCurrentTag(event.target.value);};const handleFileChange=async event=>{var _event$target$files;const file=(_event$target$files=event.target.files)===null||_event$target$files===void 0?void 0:_event$target$files[0];if(!file)return;setLoading(true);setError('');try{// Read file content directly\nif(file.type.includes('text')){const text=await file.text();setContent(text);setType('text');}else{// For now, just store the file name as URL\n// In a real app, you'd upload the file to a storage service\nsetUrl(file.name);// Set type based on file type\nif(file.type.includes('image'))setType('image');else if(file.type.includes('video'))setType('video');else if(file.type.includes('audio'))setType('audio');else setType('static');}setSuccess(true);}catch(error){console.error('Error processing file:',error);setError(error instanceof Error?error.message:'Failed to process file');}finally{setLoading(false);}};const handleSubmit=async event=>{event.preventDefault();setLoading(true);setError(null);try{console.log('Submitting memory:',{type,url,content,tags});const requestBody={type,url:url||undefined,content:content||undefined,tags:tags||[]};const response=await fetch('/.netlify/functions/file-upload',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(requestBody)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.error||'Failed to upload memory');}const data=await response.json();console.log('Server response:',data);if(!data.memory){throw new Error('No memory data in server response');}onMemoryCreated(data.memory);setSuccess(true);setUrl('');setContent('');setTags([]);setType('url');}catch(err){console.error('Error uploading memory:',err);setError(err instanceof Error?err.message:'Failed to upload memory');}finally{setLoading(false);}};const getTypeIcon=memoryType=>{switch(memoryType){case'url':return/*#__PURE__*/_jsx(LinkIcon,{});case'text':return/*#__PURE__*/_jsx(TextFieldsIcon,{});case'image':return/*#__PURE__*/_jsx(ImageIcon,{});case'video':return/*#__PURE__*/_jsx(VideoFileIcon,{});case'audio':return/*#__PURE__*/_jsx(AudioFileIcon,{});case'static':return/*#__PURE__*/_jsx(InsertDriveFileIcon,{});}};return/*#__PURE__*/_jsxs(Box,{component:\"form\",onSubmit:handleSubmit,sx:{width:'100%',mb:2},children:[/*#__PURE__*/_jsxs(Stack,{spacing:2,children:[/*#__PURE__*/_jsxs(FormControl,{fullWidth:true,children:[/*#__PURE__*/_jsx(InputLabel,{children:\"Memory Type\"}),/*#__PURE__*/_jsxs(Select,{value:type,onChange:handleTypeChange,label:\"Memory Type\",startAdornment:getTypeIcon(type),children:[/*#__PURE__*/_jsx(MenuItem,{value:\"url\",children:\"URL\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"text\",children:\"Text\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"image\",children:\"Image\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"video\",children:\"Video\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"audio\",children:\"Audio\"}),/*#__PURE__*/_jsx(MenuItem,{value:\"static\",children:\"Static File\"})]})]}),type!=='text'&&/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:1,children:[/*#__PURE__*/_jsx(TextField,{fullWidth:true,label:`${type.charAt(0).toUpperCase()+type.slice(1)} URL`,value:url,onChange:handleUrlChange,InputProps:{startAdornment:getTypeIcon(type)}}),/*#__PURE__*/_jsx(Tooltip,{title:`Upload ${type} file`,children:/*#__PURE__*/_jsxs(Button,{variant:\"outlined\",component:\"label\",onClick:()=>{var _fileInputRef$current;return(_fileInputRef$current=fileInputRef.current)===null||_fileInputRef$current===void 0?void 0:_fileInputRef$current.click();},children:[\"Upload\",/*#__PURE__*/_jsx(Input,{ref:fileInputRef,type:\"file\",onChange:handleFileChange,accept:isFileType(type)?SUPPORTED_FILE_TYPES[type].join(','):undefined})]})})]}),type==='text'&&/*#__PURE__*/_jsx(TextField,{fullWidth:true,multiline:true,rows:4,label:\"Text Content\",value:content,onChange:handleContentChange}),/*#__PURE__*/_jsxs(Stack,{spacing:1,children:[/*#__PURE__*/_jsxs(Stack,{direction:\"row\",spacing:1,alignItems:\"center\",children:[/*#__PURE__*/_jsx(TextField,{label:\"Add Tags\",value:currentTag,onChange:handleTagChange,onKeyPress:handleKeyPress,size:\"small\"}),/*#__PURE__*/_jsx(IconButton,{onClick:handleTagAdd,disabled:!currentTag,children:/*#__PURE__*/_jsx(AddIcon,{})})]}),tags.length>0&&/*#__PURE__*/_jsx(Box,{sx:{display:'flex',flexWrap:'wrap',gap:1},children:tags.map((tag,index)=>/*#__PURE__*/_jsx(Chip,{label:tag,onDelete:()=>handleTagDelete(tag),deleteIcon:/*#__PURE__*/_jsx(ClearIcon,{})},index))})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",variant:\"contained\",disabled:loading||!url&&!content,startIcon:loading?/*#__PURE__*/_jsx(CircularProgress,{size:20}):null,children:\"Create Memory\"})]}),/*#__PURE__*/_jsx(Snackbar,{open:!!error,autoHideDuration:6000,onClose:()=>setError(null),anchorOrigin:{vertical:'bottom',horizontal:'center'},children:/*#__PURE__*/_jsx(Alert,{severity:\"error\",onClose:()=>setError(null),children:error})}),/*#__PURE__*/_jsx(Snackbar,{open:success,autoHideDuration:3000,onClose:()=>setSuccess(false),anchorOrigin:{vertical:'bottom',horizontal:'center'},children:/*#__PURE__*/_jsx(Alert,{severity:\"success\",onClose:()=>setSuccess(false),children:\"Memory created successfully!\"})})]});};export default UploadBar;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}